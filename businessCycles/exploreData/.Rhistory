nrow(firms)
calcResDemand_Prof = function(firms, prices) {
df = firms %>%
add_column(p = prices, q = 0, resDem=0) %>%
arrange(p) %>%
for (i in 1:nrow(df)) {
if (i == 1) {
df$resDem[i] = demand(df$p[i])
} else {
df$resDem[i] = demand(df$p[i] * ( 1 - df$q[i-1] / df$resDem[i-1]))
}
df$q[i] = min(df$k[i], demand(df$p[i]))
}
return(df)
}
firms %>% calcResDemand_Prof(c(4,2, 7))
calcResDemand_Prof = function(firms, prices) {
df = firms %>%
add_column(p = prices, q = 0, resDem=0) %>%
arrange(p)
for (i in 1:nrow(df)) {
if (i == 1) {
df$resDem[i] = demand(df$p[i])
} else {
df$resDem[i] = demand(df$p[i] * ( 1 - df$q[i-1] / df$resDem[i-1]))
}
df$q[i] = min(df$k[i], demand(df$p[i]))
}
return(df)
}
firms %>% calcResDemand_Prof(c(4,2, 7))
source('C:/Users/javie/git/businessCycles/businessCycles/exploreData/shortTermMaxim-nv.R')
source('C:/Users/javie/git/businessCycles/businessCycles/exploreData/shortTermMaxim-nv.R')
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK))
firms %>% calcResDemand_Prof(c(4,2, 7))
firms %>% addResDemand_Prof(c(4,2, 7))
firms %>% addResDemand_Prof(c(7,7, 7))
View(firms)
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
p = max(pcumK),
fullKPrice = (max(pcumK)- mc) * k)
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
p = max(pcumK),
fullKPrice = (min(pcumK)- mc) * k)
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
p = min(pcumK),
fullKProfit = (min(pcumK)- mc) * k)
source('C:/Users/javie/git/businessCycles/businessCycles/exploreData/shortTermMaxim-nv.R')
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
recPcumK = recPrice(cumK, recMag),
p = min(pcumK),
fullKProfit = (min(pcumK)- mc) * k)
recMag = 0.4
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
recPcumK = recPrice(cumK, recMag),
p = min(pcumK),
fullKProfit = (min(pcumK)- mc) * k)
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
recPcumK = recPrice(cumK, recMag),
p = min(pcumK),
fullKProfit = (min(pcumK)- mc) * k,
recFullKProfit = (min(recPcumK)- mc) * k)
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
recPcumK = recPrice(cumK, recMag),
pfullK = min(pcumK),
recPfullK = min(recPcumK),
fullKProfit = (min(pcumK)- mc) * k,
recFullKProfit = (min(recPcumK)- mc) * k)
source('C:/Users/javie/git/businessCycles/businessCycles/exploreData/shortTermMaxim-nv.R')
recMag = 0.4
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
recPcumK = recPrice(cumK, recMag),
pfullK = min(pcumK),
recPfullK = min(recPcumK),
fullKProfit = (min(pcumK)- mc) * k,
recFullKProfit = (min(recPcumK)- mc) * k)
firms %>% addResDemand_Prof(c(7, 7, 7))
prices = c(7, 7, 7)
prices = c(7, 7, 7)
price_Cap = bind_cols(firms$k, prices)
price_Cap = bind_cols(k = firms$k, prices)
price_Cap = bind_cols(k = firms$k, prices = prices)
price_Cap
price_Cap = bind_cols(k = firms$k, price = prices) %>%
group_by(price) %>%
mutate(price = sum(price))
price_Cap = bind_cols(k = firms$k, price = prices) %>%
group_by(price) %>%
mutate(k = sum(k))
View(price_Cap)
price_Cap = bind_cols(k = firms$k, price = prices) %>%
group_by(price) %>%
summarize(k = sum(k))
View(firms)
View(price_Cap)
prices = c(7, 4, 7)
price_Cap = bind_cols(k = firms$k, price = prices) %>%
group_by(price) %>%
summarize(k = sum(k))
price_Cap = bind_cols(k = firms$k, p = prices) %>%
group_by(price) %>%
summarize(k = sum(k))
prices = c(7, 4, 7)
price_Cap = bind_cols(k = firms$k, p = prices) %>%
group_by(price) %>%
summarize(k = sum(k))
View(price_Cap)
price_Cap = bind_cols(k = firms$k, p = prices) %>%
group_by(p) %>%
summarize(k = sum(k))
View(price_Cap)
source('C:/Users/javie/git/businessCycles/businessCycles/exploreData/shortTermMaxim-nv.R')
recMag = 0.4
firms = tibble(id = 1:3,
mc = c(1,1.5,2),
k = c(20000,15000, 5000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
recPcumK = recPrice(cumK, recMag),
pfullK = min(pcumK),
recPfullK = min(recPcumK),
fullKProfit = (min(pcumK)- mc) * k,
recFullKProfit = (min(recPcumK)- mc) * k)
firms = tibble(id = 1:4,
mc = c(1,1.5,2, 2.3),
k = c(20000,15000, 5000, 7000)) %>%
mutate(cumK = cumsum(k),
pMonop = mc * elast /(elast-1),
pcumK = price(cumK),
recPcumK = recPrice(cumK, recMag),
pfullK = min(pcumK),
recPfullK = min(recPcumK),
fullKProfit = (min(pcumK)- mc) * k,
recFullKProfit = (min(recPcumK)- mc) * k)
prices = c(7, 4, 6, 2)
price_Cap = bind_cols(k = firms$k, p = prices) %>%
group_by(p) %>%
summarize(k = sum(k))
df1 = calcResDemand(price_Cap)
df2 = calcResDemand2(price_Cap)
View(df1)
price_cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = demand(acumK))
calcResDemand2 = function(price_Cap){
price_ap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = demand(acumK)) %>%
mutate_if(p < pAcumK,
q = k) %>%
mutate_if(p > pAcumK && pAnt > pAcumK,
q = 0)
}
df2 = calcResDemand2(price_Cap)
calcResDemand2 = function(price_Cap){
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = demand(acumK)) %>%
mutate_if(p < pAcumK,
q = k) %>%
mutate_if(p > pAcumK && pAnt > pAcumK,
q = 0)
}
df2 = calcResDemand2(price_Cap)
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = demand(acumK))
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = demand(acumK)) %>%
mutate_if(p < pAcumK,
q = k)
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = demand(acumK)) %>%
mutate_if(.$p < .$pAcumK,
q = k)
calcResDemand2 = function(price_Cap){
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = demand(acumK)) %>%
mutate(q = case_when(
p <= pAcumK ~ k,
p > pAcumK && pAnt > pAcumK ~ 0,
TRUE ~ 7000))
}
df2 = calcResDemand2(price_Cap)
View(df2)
calcResDemand2 = function(price_Cap){
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = price(acumK)) %>%
mutate(q = case_when(
p <= pAcumK ~ k,
p > pAcumK && pAnt > pAcumK ~ 0,
TRUE ~ 7000))
}
df2 = calcResDemand2(price_Cap)
calcResDemand2 = function(price_Cap){
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = price(acumK)) %>%
mutate(q = case_when(
p <= pAcumK ~ k,
p > pAcumK && pAnt > pAcumK ~ 0,
TRUE ~ 7000)) %>%
mutate( dem = demand(p))
}
df2 = calcResDemand2(price_Cap)
calcResDemand2 = function(price_Cap){
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lead(.$p, 1),
acumK = cumsum(k),
pAcumK = price(acumK)) %>%
mutate(q = case_when(
p <= pAcumK ~ k,
(p > pAcumK) && (pAnt > pAcumK) ~ 0,
TRUE ~ 7000)) %>%
mutate( dem = demand(p))
}
df2 = calcResDemand2(price_Cap)
calcResDemand2 = function(price_Cap){
price_Cap %>%
arrange(p) %>%
mutate(pAnt = lag(.$p, 1),
acumK = cumsum(k),
pAcumK = price(acumK)) %>%
mutate(q = case_when(
p <= pAcumK ~ k,
(p > pAcumK) && (pAnt > pAcumK) ~ 0,
TRUE ~ 7000)) %>%
mutate( dem = demand(p))
}
df2 = calcResDemand2(price_Cap)
setwd("C:/Users/javie/git/businessCycles/businessCycles/exploreData")
source('C:/Users/javie/git/businessCycles/businessCycles/exploreData/shortTermMaxim-nv.R')
recMag = 0
repPrice = 3
firmNum = 10
minK = 2000
maxK = 6000
minMC = 1
maxMC = 3
prices = runif(firmNum - repPrice, 3, 7)
repPrices = sample(1:(firmNum-repPrice), repPrice)
prices = c(prices, sapply(1:repPrice, function(x) prices[repPrices[x]] ))
firms = tibble(id= 1:firmNum,
p = prices,
k = runif(firmNum, minK, maxK),
mc = runif(firmNum, minMC, maxMC)
)
firms %>% write_excel_csv("firms.csv")
df = getQuantAndProfit(firms)
firmToDraw = 3
pricesToDraw = seq(0,10, by=0.1)
firmToDraw = 9
pricesToDraw = seq(0,10, by=0.1)
tibble(x = pricesToDraw,
prof = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(profit)),
quant = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(q))) %>%
gather(prof, quant, key = key, value = value) %>%
ggplot(aes(x, value, color = key )) +
geom_line()
ggplotly()
tibble(x = pricesToDraw,
prof = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(profit)),
quant = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(q))) %>%
gather(prof, quant, key = key, value = value) %>%
ggplot(aes(x, value, color = key )) +
geom_line()
ggplotly()
library(plotly)
tibble(x = pricesToDraw,
prof = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(profit)),
quant = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(q))) %>%
gather(prof, quant, key = key, value = value) %>%
ggplot(aes(x, value, color = key )) +
geom_line()
ggplotly()
firmID = 9
newP = 5.1
firms = firms %>%
mutate(p = if_else(id == firmID, newP, p))
df = getQuantAndProfit(firms)
# Daw profit and q
firmToDraw = 3
pricesToDraw = seq(0,10, by=0.1)
tibble(x = pricesToDraw,
prof = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(profit)),
quant = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(q))) %>%
gather(prof, quant, key = key, value = value) %>%
ggplot(aes(x, value, color = key )) +
geom_line()
ggplotly()
#Set new price
firmID = 3
newP = 5.09
firms = firms %>%
mutate(p = if_else(id == firmID, newP, p))
df = getQuantAndProfit(firms)
profitToOptimizae(price, firms, f) {
firmIDProfitPerP(firms, f, price) %>%
filter(id = f) %>%
pull(profit)
}
profitToOptimizae(price, firms, f) {
firmIDProfitPerP(firms, f, price) %>%
filter(id == f) %>%
pull(profit)
}
profitToOptimizae = function(price, firms, f) {
firmIDProfitPerP(firms, f, price) %>%
filter(id == f) %>%
pull(profit)
}
profitToOptimize = function(price, firms, f) {
firmIDProfitPerP(firms, f, price) %>%
filter(id == f) %>%
pull(profit)
}
profitToOptimize = function(price) {
firmIDProfitPerP(firms, firmID, price) %>%
filter(id == f) %>%
pull(profit)
}
firmID = 9
profitToOptimize(5.108970)
profitToOptimize = function(price) {
firmIDProfitPerP(firms, firmID, price) %>%
filter(id == firmID) %>%
pull(profit)
}
firmID = 3
profitToOptimize(5.108970)
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE)
profitToOptimize = function(price, firms, firmID) {
firmIDProfitPerP(firms, firmID, price) %>%
filter(id == firmID) %>%
pull(profit)
}
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE, firmID = 3, firms = firms)
priceRanteToOptimize = c(0.1, 10)
improveFirm = function(firmsDF, fID)  {
optimize(profitToOptimize,
priceRanteToOptimize,
maximum = TRUE,
firms = firmsDF,
firmID = fID)
}
improveFirm = function(firmsDF, fID)  {
opt = optimize(profitToOptimize,
priceRanteToOptimize,
maximum = TRUE,
firms = firmsDF,
firmID = fID)
firmsDF = firmsDF %>%
mutate(p = if_else(id == fID, opt$maximum, p))
}
firms %>% filter(id == 3) %>% pull(p)
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE, firmID = 3, firms = firms)
firmID = 6
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE, firmID = 3, firms = firms)
library(plotly)
setwd("C:/Users/javie/git/businessCycles/businessCycles/exploreData")
source('C:/Users/javie/git/businessCycles/businessCycles/exploreData/shortTermMaxim-nv.R')
recMag = 0
repPrice = 3
firmNum = 10
minK = 2000
maxK = 6000
minMC = 1
maxMC = 3
prices = runif(firmNum - repPrice, 3, 7)
repPrices = sample(1:(firmNum-repPrice), repPrice)
prices = c(prices, sapply(1:repPrice, function(x) prices[repPrices[x]] ))
firms = tibble(id= 1:firmNum,
p = prices,
k = runif(firmNum, minK, maxK),
mc = runif(firmNum, minMC, maxMC)
)
# firms %>% write_excel_csv("firms.csv")
df = getQuantAndProfit(firms)
priceRanteToOptimize = c(0.1, 10)
profitToOptimize = function(price, firmsDF, fD) {
firmIDProfitPerP(firmsDF, fID, price) %>%
filter(id == fID) %>%
pull(profit)
}
firmID = 6
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE, firmID = 3, firms = firms)
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE, firmsDF = firms, fID = 3)
profitToOptimize = function(price, firmsDF, fID) {
firmIDProfitPerP(firmsDF, fID, price) %>%
filter(id == fID) %>%
pull(profit)
}
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE, firmsDF = firms, fID = 3)
improveFirm = function(firmsDF, fID)  {
opt = optimize(profitToOptimize,
priceRanteToOptimize,
maximum = TRUE,
firms = firmsDF,
firmID = fID)
firmsDF = firmsDF %>%
mutate(p = if_else(id == fID, opt$maximum, p))
}
optimize(profitToOptimize, c(0.1, 8), maximum = TRUE, firmsDF = firms, fID = 3)
# Daw profit and q
firmToDraw = 3
pricesToDraw = seq(0,10, by=0.1)
tibble(x = pricesToDraw,
prof = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(profit)),
quant = sapply(x,
function(p) firmIDProfitPerP(firms, firmToDraw, p) %>%
filter(id == firmToDraw) %>%
pull(q))) %>%
gather(prof, quant, key = key, value = value) %>%
ggplot(aes(x, value, color = key )) +
geom_line()
ggplotly()
